
service:
  type: NodePort
  grafana:
    namespace: grafana
    targerPort: 3000
    port: 80
    name: grafana-http
    nodePort: 32001
  prometheus:
    namespace: prometheus
    targerPort: 9090
    port: 80
    name: prometheus-http
    nodePort: 32002

producer:
  name: producer
  replicaCount: 1
  resources:
    limits:
      cpu: 100m
      memory: 256Mi

  readinessProbe: {}

  startupProbe: {}
    # httpGet:
    #   path: /healthz
    #   port: liveness-port
    # failureThreshold: 30
    # periodSeconds: 10

  livenessProbe: {}
    # httpGet:
    #   path: /healthz
    #   port: 4000
    #   # httpHeaders:
    #   # - name: Custom-Header
    #   #   value: Awesome
    # initialDelaySeconds: 3
    # periodSeconds: 3
    # failureThreshold: 3
    # successThreshold: 1
    

consumer:
  name: consumer
  replicaCount: 1
  resources:
    limits:
      cpu: 100m
      memory: 256Mi

  readinessProbe: {}

  startupProbe: {}
    # httpGet:
    #   path: /healthz
    #   port: liveness-port
    # failureThreshold: 30
    # periodSeconds: 10

  livenessProbe: {}
    # httpGet:
    #   path: /healthz
    #   port: 4000
    #   # httpHeaders:
    #   # - name: Custom-Header
    #   #   value: Awesome
    # initialDelaySeconds: 3
    # periodSeconds: 3
    # failureThreshold: 3
    # successThreshold: 1

nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

enabled: "true"


    
prometheus:
  name: prometheus-server
  namespace: prometheus
  replicas: 1
  